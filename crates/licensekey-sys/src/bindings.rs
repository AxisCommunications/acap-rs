/* automatically generated by rust-bindgen 0.69.5 */

extern "C" {
    #[doc = " @brief Perform a license key check.\n\n @param app_name The name of the application. Must match APPNAME in\n package.conf.\n\n @param app_id The application id of the application, assigned by Axis.\n Must match APPID in package.conf.\n\n @param major_version The major version of the application. Must match\n APPMAJORVERSION in package.conf.\n\n @param minor_version The minor version of the application. Must match\n APPMINORVERSION in package.conf.\n\n @return 1 on success, 0 on failure."]
    pub fn licensekey_verify(
        app_name: *const ::std::os::raw::c_char,
        app_id: ::std::os::raw::c_int,
        major_version: ::std::os::raw::c_int,
        minor_version: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " @brief Perform a license key check for ACAP3 applications.\n\n @param app_name The name of the application. Must match APPNAME in\n package.conf.\n\n @param app_id The application id of the application, assigned by Axis.\n Must match APPID in package.conf.\n\n @param major_version The major version of the application. Must match\n APPMAJORVERSION in package.conf.\n\n @param minor_version The minor version of the application. Must match\n APPMINORVERSION in package.conf.\n\n @param licensekey_path Optional license key path meant to be used mainly for\n acap3 but is also available for acap2. Defaults to the acap2 license key\n folder.\n\n @return integer with license key state. The corresponding state message may\n be retrieved with function licensekey_get_state_string()."]
    pub fn licensekey_verify_ex(
        app_name: *const ::std::os::raw::c_char,
        app_id: ::std::os::raw::c_int,
        major_version: ::std::os::raw::c_int,
        minor_version: ::std::os::raw::c_int,
        licensekey_path: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " @brief Return the expiration date of the license.\n\n @param app_name The name of the application. Must match APPNAME in\n package.conf.\n\n @param licensekey_path Optional license key path meant to be used mainly for\n acap3 but is also available for acap2. Defaults to the acap2 license key\n folder.\n\n @return string with the expiration date in YYYY-MM-DD format.\n @return NULL if the expiration date couldn't be read"]
    pub fn licensekey_get_exp_date(
        app_name: *const ::std::os::raw::c_char,
        licensekey_path: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    #[doc = " @brief Return an explicatory message of a license key state for ACAP3 applications.\n\n @param state_code Integer with license key state.\n\n @return string with license key state message, needs to be freed with g_free()\n @return NULL if state is not a valid error state"]
    pub fn licensekey_get_state_string(
        state_code: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum LicenseKeyState {
    STATE_VALIDATION_ERROR = 0,
    STATE_VALID = 1,
    STATE_INVALID_VERSION = 2,
    STATE_EXPIRED_DATE = 3,
    STATE_ILLEGAL_APPLICATION_ID_MISMATCH = 4,
    STATE_ILLEGAL_DEVICE_ID_MISMATCH = 5,
    STATE_ILLEGAL_MISSING_FIELDS = 6,
    STATE_ILLEGAL_INVALID_ENTRY_APPLICATION_ID = 7,
    STATE_ILLEGAL_INVALID_ENTRY_MIN_MAJOR = 8,
    STATE_ILLEGAL_INVALID_ENTRY_MIN_MINOR = 9,
    STATE_ILLEGAL_INVALID_ENTRY_MAX_MAJOR = 10,
    STATE_ILLEGAL_INVALID_ENTRY_MAX_MINOR = 11,
    STATE_ILLEGAL_KEY_DECODING_FAILS = 12,
    STATE_ILLEGAL_INVALID_SIGNATURE = 13,
    NUM_LICENSEKEY_STATES = 14,
}
extern "C" {
    pub static mut LicenseKeyState: LicenseKeyState;
}
