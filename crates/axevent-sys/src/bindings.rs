/* automatically generated by rust-bindgen 0.69.4 */

pub const AXEventValueType_AX_VALUE_TYPE_INT: AXEventValueType = 0;
pub const AXEventValueType_AX_VALUE_TYPE_BOOL: AXEventValueType = 1;
pub const AXEventValueType_AX_VALUE_TYPE_DOUBLE: AXEventValueType = 2;
pub const AXEventValueType_AX_VALUE_TYPE_STRING: AXEventValueType = 3;
pub const AXEventValueType_AX_VALUE_TYPE_ELEMENT: AXEventValueType = 4;
pub type AXEventValueType = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _AXEventElementItem {
    _unused: [u8; 0],
}
pub type AXEventElementItem = _AXEventElementItem;
extern "C" {
    pub fn ax_event_element_item_new(
        name: *const gchar,
        name_space: *const gchar,
    ) -> *mut AXEventElementItem;
}
extern "C" {
    pub fn ax_event_element_item_free(node: *mut AXEventElementItem);
}
extern "C" {
    pub fn ax_event_element_item_get_name(
        node: *mut AXEventElementItem,
        name: *mut *mut gchar,
        error: *mut *mut GError,
    ) -> gboolean;
}
extern "C" {
    pub fn ax_event_element_item_get_name_space(
        node: *mut AXEventElementItem,
        name_space: *mut *mut gchar,
        error: *mut *mut GError,
    ) -> gboolean;
}
extern "C" {
    pub fn ax_event_element_item_set_attributes(
        node: *mut AXEventElementItem,
        attributes: *mut GHashTable,
        error: *mut *mut GError,
    ) -> gboolean;
}
extern "C" {
    pub fn ax_event_element_item_get_attributes(
        node: *mut AXEventElementItem,
        attributes: *mut *mut GHashTable,
        error: *mut *mut GError,
    ) -> gboolean;
}
extern "C" {
    pub fn ax_event_element_item_set_body(
        node: *mut AXEventElementItem,
        body: *const gchar,
        error: *mut *mut GError,
    ) -> gboolean;
}
extern "C" {
    pub fn ax_event_element_item_get_body(
        node: *mut AXEventElementItem,
        body: *mut *mut gchar,
        error: *mut *mut GError,
    ) -> gboolean;
}
extern "C" {
    pub fn ax_event_element_item_add_child(
        node: *mut AXEventElementItem,
        child: *mut AXEventElementItem,
        error: *mut *mut GError,
    ) -> gboolean;
}
extern "C" {
    pub fn ax_event_element_item_get_first_child(
        parent: *mut AXEventElementItem,
        child: *mut *mut AXEventElementItem,
        error: *mut *mut GError,
    ) -> gboolean;
}
extern "C" {
    pub fn ax_event_element_item_get_next_child(
        child: *mut AXEventElementItem,
        sibling: *mut *mut AXEventElementItem,
        error: *mut *mut GError,
    ) -> gboolean;
}
pub const AXEventErrorCode_AX_EVENT_ERROR_GENERIC: AXEventErrorCode = 0;
pub const AXEventErrorCode_AX_EVENT_ERROR_INVALID_ARGUMENT: AXEventErrorCode = 1;
pub const AXEventErrorCode_AX_EVENT_ERROR_INCOMPATIBLE_VALUE: AXEventErrorCode = 2;
pub const AXEventErrorCode_AX_EVENT_ERROR_DECLARATION: AXEventErrorCode = 3;
pub const AXEventErrorCode_AX_EVENT_ERROR_UNDECLARE: AXEventErrorCode = 4;
pub const AXEventErrorCode_AX_EVENT_ERROR_SEND: AXEventErrorCode = 5;
pub const AXEventErrorCode_AX_EVENT_ERROR_SUBSCRIPTION: AXEventErrorCode = 6;
pub const AXEventErrorCode_AX_EVENT_ERROR_UNSUBSCRIBE: AXEventErrorCode = 7;
pub const AXEventErrorCode_AX_EVENT_ERROR_KEY_NOT_FOUND: AXEventErrorCode = 8;
pub const AXEventErrorCode_AX_EVENT_ERROR_END: AXEventErrorCode = 9;
pub type AXEventErrorCode = ::std::os::raw::c_uint;
extern "C" {
    pub fn ax_event_error_quark() -> GQuark;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _AXEventKeyValueSet {
    _unused: [u8; 0],
}
pub type AXEventKeyValueSet = _AXEventKeyValueSet;
extern "C" {
    pub fn ax_event_key_value_set_new() -> *mut AXEventKeyValueSet;
}
extern "C" {
    pub fn ax_event_key_value_set_free(key_value_set: *mut AXEventKeyValueSet);
}
extern "C" {
    pub fn ax_event_key_value_set_add_key_values(
        key_value_set: *mut AXEventKeyValueSet,
        error: *mut *mut GError,
        ...
    ) -> gboolean;
}
extern "C" {
    pub fn ax_event_key_value_set_add_key_value(
        key_value_set: *mut AXEventKeyValueSet,
        key: *const gchar,
        name_space: *const gchar,
        value: gconstpointer,
        value_type: AXEventValueType,
        error: *mut *mut GError,
    ) -> gboolean;
}
extern "C" {
    pub fn ax_event_key_value_set_mark_as_source(
        key_value_set: *mut AXEventKeyValueSet,
        key: *const gchar,
        name_space: *const gchar,
        error: *mut *mut GError,
    ) -> gboolean;
}
extern "C" {
    pub fn ax_event_key_value_set_mark_as_data(
        key_value_set: *mut AXEventKeyValueSet,
        key: *const gchar,
        name_space: *const gchar,
        error: *mut *mut GError,
    ) -> gboolean;
}
extern "C" {
    pub fn ax_event_key_value_set_mark_as_user_defined(
        key_value_set: *mut AXEventKeyValueSet,
        key: *const gchar,
        name_space: *const gchar,
        user_tag: *const gchar,
        error: *mut *mut GError,
    ) -> gboolean;
}
extern "C" {
    pub fn ax_event_key_value_set_add_nice_names(
        key_value_set: *mut AXEventKeyValueSet,
        key: *const gchar,
        name_space: *const gchar,
        key_nice_name: *const gchar,
        value_nice_name: *const gchar,
        error: *mut *mut GError,
    ) -> gboolean;
}
extern "C" {
    pub fn ax_event_key_value_set_get_value_type(
        key_value_set: *const AXEventKeyValueSet,
        key: *const gchar,
        name_space: *const gchar,
        value_type: *mut AXEventValueType,
        error: *mut *mut GError,
    ) -> gboolean;
}
extern "C" {
    pub fn ax_event_key_value_set_get_integer(
        key_value_set: *const AXEventKeyValueSet,
        key: *const gchar,
        name_space: *const gchar,
        value: *mut gint,
        error: *mut *mut GError,
    ) -> gboolean;
}
extern "C" {
    pub fn ax_event_key_value_set_get_boolean(
        key_value_set: *const AXEventKeyValueSet,
        key: *const gchar,
        name_space: *const gchar,
        value: *mut gboolean,
        error: *mut *mut GError,
    ) -> gboolean;
}
extern "C" {
    pub fn ax_event_key_value_set_get_double(
        key_value_set: *const AXEventKeyValueSet,
        key: *const gchar,
        name_space: *const gchar,
        value: *mut gdouble,
        error: *mut *mut GError,
    ) -> gboolean;
}
extern "C" {
    pub fn ax_event_key_value_set_get_string(
        key_value_set: *const AXEventKeyValueSet,
        key: *const gchar,
        name_space: *const gchar,
        value: *mut *mut gchar,
        error: *mut *mut GError,
    ) -> gboolean;
}
extern "C" {
    pub fn ax_event_key_value_set_get_element(
        key_value_set: *const AXEventKeyValueSet,
        key: *const gchar,
        name_space: *const gchar,
        item: *mut *mut AXEventElementItem,
        error: *mut *mut GError,
    ) -> gboolean;
}
extern "C" {
    pub fn ax_event_key_value_set_remove_key(
        key_value_set: *mut AXEventKeyValueSet,
        key: *const gchar,
        name_space: *const gchar,
        error: *mut *mut GError,
    ) -> gboolean;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _AXEvent {
    _unused: [u8; 0],
}
pub type AXEvent = _AXEvent;
extern "C" {
    pub fn ax_event_new(
        key_value_set: *mut AXEventKeyValueSet,
        time_stamp: *mut GTimeVal,
    ) -> *mut AXEvent;
}
extern "C" {
    pub fn ax_event_new2(
        key_value_set: *mut AXEventKeyValueSet,
        time_stamp: *mut GDateTime,
    ) -> *mut AXEvent;
}
extern "C" {
    pub fn ax_event_free(event: *mut AXEvent);
}
extern "C" {
    pub fn ax_event_get_key_value_set(event: *mut AXEvent) -> *const AXEventKeyValueSet;
}
extern "C" {
    pub fn ax_event_get_time_stamp(event: *mut AXEvent) -> *const GTimeVal;
}
extern "C" {
    pub fn ax_event_get_time_stamp2(event: *mut AXEvent) -> *mut GDateTime;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _AXEventHandler {
    _unused: [u8; 0],
}
pub type AXEventHandler = _AXEventHandler;
pub type AXSubscriptionCallback = ::std::option::Option<
    unsafe extern "C" fn(subscription: guint, event: *mut AXEvent, user_data: gpointer),
>;
pub type AXDeclarationCompleteCallback =
    ::std::option::Option<unsafe extern "C" fn(declaration: guint, user_data: gpointer)>;
extern "C" {
    pub fn ax_event_handler_new() -> *mut AXEventHandler;
}
extern "C" {
    pub fn ax_event_handler_free(event_handler: *mut AXEventHandler);
}
extern "C" {
    pub fn ax_event_handler_declare(
        event_handler: *mut AXEventHandler,
        key_value_set: *mut AXEventKeyValueSet,
        stateless: gboolean,
        declaration: *mut guint,
        callback: AXDeclarationCompleteCallback,
        user_data: gpointer,
        error: *mut *mut GError,
    ) -> gboolean;
}
extern "C" {
    pub fn ax_event_handler_declare2(
        event_handler: *mut AXEventHandler,
        key_value_set: *mut AXEventKeyValueSet,
        stateless: gboolean,
        property_name: *mut gchar,
        declaration: *mut guint,
        callback: AXDeclarationCompleteCallback,
        user_data: gpointer,
        error: *mut *mut GError,
    ) -> gboolean;
}
extern "C" {
    pub fn ax_event_handler_declare_from_template(
        event_handler: *mut AXEventHandler,
        event_template: *const ::std::os::raw::c_char,
        key_value_set: *mut AXEventKeyValueSet,
        declaration: *mut guint,
        callback: AXDeclarationCompleteCallback,
        user_data: gpointer,
        error: *mut *mut GError,
    ) -> gboolean;
}
extern "C" {
    pub fn ax_event_handler_undeclare(
        event_handler: *mut AXEventHandler,
        declaration: guint,
        error: *mut *mut GError,
    ) -> gboolean;
}
extern "C" {
    pub fn ax_event_handler_send_event(
        event_handler: *mut AXEventHandler,
        declaration: guint,
        event: *mut AXEvent,
        error: *mut *mut GError,
    ) -> gboolean;
}
extern "C" {
    pub fn ax_event_handler_subscribe(
        event_handler: *mut AXEventHandler,
        key_value_set: *mut AXEventKeyValueSet,
        subscription: *mut guint,
        callback: AXSubscriptionCallback,
        user_data: gpointer,
        error: *mut *mut GError,
    ) -> gboolean;
}
extern "C" {
    pub fn ax_event_handler_unsubscribe(
        event_handler: *mut AXEventHandler,
        subscription: guint,
        error: *mut *mut GError,
    ) -> gboolean;
}
