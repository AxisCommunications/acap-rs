/* automatically generated by rust-bindgen 0.69.5 */

#[doc = "< The value is an integer."]
pub const AXEventValueType_AX_VALUE_TYPE_INT: AXEventValueType = 0;
#[doc = "< The value is a boolean."]
pub const AXEventValueType_AX_VALUE_TYPE_BOOL: AXEventValueType = 1;
#[doc = "< The value is a double."]
pub const AXEventValueType_AX_VALUE_TYPE_DOUBLE: AXEventValueType = 2;
#[doc = "< The value is a string."]
pub const AXEventValueType_AX_VALUE_TYPE_STRING: AXEventValueType = 3;
#[doc = "< The value is a ElementItem"]
pub const AXEventValueType_AX_VALUE_TYPE_ELEMENT: AXEventValueType = 4;
#[doc = " \\enum AXEventValueType\n enumerates the different types that a value\n part of an \\c AXEventKeyValueSet can belong to."]
pub type AXEventValueType = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _AXEventElementItem {
    _unused: [u8; 0],
}
#[doc = " \\brief The \\c AXEventElementItem is a n opaque data type representing a node\n in a tree."]
pub type AXEventElementItem = _AXEventElementItem;
extern "C" {
    #[doc = " \\brief Creates a new node in the tree.\n\n \\param name       The name of the node\n \\param name_space The name space the name of the node is part of.\n \\return           A newly created \\c AXEventElementItem if successful otherwise\n                   NULL."]
    pub fn ax_event_element_item_new(
        name: *const gchar,
        name_space: *const gchar,
    ) -> *mut AXEventElementItem;
}
extern "C" {
    #[doc = " \\brief Frees an \\c AXEventElementItem\n\n \\param node       An \\c AXEventElementItem node."]
    pub fn ax_event_element_item_free(node: *mut AXEventElementItem);
}
extern "C" {
    #[doc = " \\brief Get the name of an \\c AXEventElementItem.\n\n \\param node       An \\c AXEventElementItem.\n \\param name       The return location of the name. It's the responsibility\n                   of the caller to free the memory returned in this pointer.\n \\param error      The return location for an error or \\c NULL.\n \\return           \\c TRUE if the name was successfully retrieved, otherwise\n                   \\c FALSE. If \\c FALSE and \\c error is not NULL, then \\c\n                   error contains a detailed description of the error."]
    pub fn ax_event_element_item_get_name(
        node: *mut AXEventElementItem,
        name: *mut *mut gchar,
        error: *mut *mut GError,
    ) -> gboolean;
}
extern "C" {
    #[doc = " \\brief Get the name space of the name of an \\c AXEventElementItem.\n\n \\param node       An \\c AXEventElementItem.\n \\param name_space The return location of the name space. It's the\n                   responsibility of the caller to free the memory returned\n                   through this pointer.\n \\param error      The return location for an error or \\c NULL.\n \\return           \\c TRUE if the name space is successfully retrieved,\n                   otherwise \\c FALSE. If \\c FALSE and \\c error is not NULL,\n                   then \\c error contains a detailed description of the\n                   error."]
    pub fn ax_event_element_item_get_name_space(
        node: *mut AXEventElementItem,
        name_space: *mut *mut gchar,
        error: *mut *mut GError,
    ) -> gboolean;
}
extern "C" {
    #[doc = " \\brief Adds attributes to an \\c AXEventElementItem. If called more than once on\n the same \\c AXEventElementItem, only the attributes provided in the last call\n are  used. The attributes can be removed by providing \\c NULL as attributes.\n\n \\param node       An \\c AXEventElementItem.\n \\param attributes A \\c GHashTable in which the keys and values are strings\n                   representing the names and values of the attributes. If\n                   \\c NULL is provided, any previously set attributes are\n                   removed.\n \\param error      The return location for an error or \\c NULL.\n \\return           \\c TRUE if the attributes were successfully set, otherwise\n                   \\c FALSE. If \\c FALSE and \\c error is not \\c NULL,\n                   then \\c error contains a detalied description of the\n                   error."]
    pub fn ax_event_element_item_set_attributes(
        node: *mut AXEventElementItem,
        attributes: *mut GHashTable,
        error: *mut *mut GError,
    ) -> gboolean;
}
extern "C" {
    #[doc = " \\brief Get the attributes of an \\c AXEventElementItem.\n\n \\param node       An \\c AXEventElementItem.\n \\param attributes The return location for the attributes. It's the\n                   responsibility of the caller to free the \\c GHashTable\n                   by calling \\c g_hash_table_destroy().\n \\param error      The return location for an error or \\c NULL.\n \\return           \\c TRUE if the attributes were successfully retrieved,\n                   otherwise \\c FALSE. If \\c FALSE and \\c error is not\n                   \\c NULL, then \\c error contains a detailed description of\n                   the error."]
    pub fn ax_event_element_item_get_attributes(
        node: *mut AXEventElementItem,
        attributes: *mut *mut GHashTable,
        error: *mut *mut GError,
    ) -> gboolean;
}
extern "C" {
    #[doc = " \\brief Set the body of an \\c AXEventElementItem.\n\n \\param node       An \\c AXEventElementItem.\n \\param body       The body or NULL to remove any previously set body.\n \\param error      The return location for an error or \\c NULL.\n \\return           \\c TRUE if the body was successfully set, otherwise\n                   \\c FALSE. If \\c FALSE and \\c error is not \\c NULL, then\n                   \\c error contains a detailed description of of the error."]
    pub fn ax_event_element_item_set_body(
        node: *mut AXEventElementItem,
        body: *const gchar,
        error: *mut *mut GError,
    ) -> gboolean;
}
extern "C" {
    #[doc = " \\brief Get the body of an \\c AXEventElementItem.\n\n \\param node       An \\c AXEventElementItem.\n \\param body       The return location for the body. It's the responsibilty\n                   of the caller to free the memory returned through this\n                   pointer.\n \\param error      The return location for an error or \\c NULL.\n \\return           \\c TRUE if the body was successfully retrieved, otherwise\n                   \\c FALSE. If \\c FALSE and \\c error is not \\c NULL, then\n                   \\c error contains a detailed description of the error."]
    pub fn ax_event_element_item_get_body(
        node: *mut AXEventElementItem,
        body: *mut *mut gchar,
        error: *mut *mut GError,
    ) -> gboolean;
}
extern "C" {
    #[doc = " \\brief Add an child to an \\c AXEventElementItem.\n\n \\param node       The parent \\c AXEventElementItem.\n \\param child      The child of the parent.\n \\param error      The return location for an error or \\c NULL.\n \\return           \\c TRUE if the child as successfully added, otherwise\n                   \\c FALSE. If \\c FALSE and \\c error is not \\c NULL, then\n                   \\c error contains a detailed description of the error."]
    pub fn ax_event_element_item_add_child(
        node: *mut AXEventElementItem,
        child: *mut AXEventElementItem,
        error: *mut *mut GError,
    ) -> gboolean;
}
extern "C" {
    #[doc = " \\brief Retrieve the first child of an \\c AXEventElementItem.\n\n \\param parent     An \\c AXEventElementItem.\n \\param child      The return location for the child \\c AXEventElementItem. It's\n                   the responsibility of the caller to free the memory\n                   returned through this pointer.\n \\param error      The return location for an error or \\c NULL.\n \\return           \\c TRUE if successfull, otherwise \\c FALSE. If \\c FALSE\n                   and \\c error is not \\c NULL, then \\c error contains a\n                   detailed description of the error."]
    pub fn ax_event_element_item_get_first_child(
        parent: *mut AXEventElementItem,
        child: *mut *mut AXEventElementItem,
        error: *mut *mut GError,
    ) -> gboolean;
}
extern "C" {
    #[doc = " \\brief Retrieve the sibling of a child.\n\n \\param child      An \\c AXEventElementItem.\n \\param sibling    The return location for the next sibling. If the last\n                   sibling has been reached, \\c NULL is returned.\n \\param error      The return location for an error or \\c NULL.\n \\return           \\c TRUE if successfull, otherwise \\c FALSE. If \\c FALSE\n                   and \\c error is not \\c NULL, then \\c error contains a\n                   detailed description of the error."]
    pub fn ax_event_element_item_get_next_child(
        child: *mut AXEventElementItem,
        sibling: *mut *mut AXEventElementItem,
        error: *mut *mut GError,
    ) -> gboolean;
}
#[doc = " An error occurred that does not fit into any other category."]
pub const AXEventErrorCode_AX_EVENT_ERROR_GENERIC: AXEventErrorCode = 0;
#[doc = " An invalid argument was supplied."]
pub const AXEventErrorCode_AX_EVENT_ERROR_INVALID_ARGUMENT: AXEventErrorCode = 1;
#[doc = " The type of the supplied value does not match the type expected."]
pub const AXEventErrorCode_AX_EVENT_ERROR_INCOMPATIBLE_VALUE: AXEventErrorCode = 2;
#[doc = " An error occurred while declaring a new event."]
pub const AXEventErrorCode_AX_EVENT_ERROR_DECLARATION: AXEventErrorCode = 3;
#[doc = " An error occurred while an event was undeclared."]
pub const AXEventErrorCode_AX_EVENT_ERROR_UNDECLARE: AXEventErrorCode = 4;
#[doc = " An error occurred while sending an event."]
pub const AXEventErrorCode_AX_EVENT_ERROR_SEND: AXEventErrorCode = 5;
#[doc = " An error occurred while subscribing to an event."]
pub const AXEventErrorCode_AX_EVENT_ERROR_SUBSCRIPTION: AXEventErrorCode = 6;
#[doc = " An error occurred while unsubscribing to an event."]
pub const AXEventErrorCode_AX_EVENT_ERROR_UNSUBSCRIBE: AXEventErrorCode = 7;
#[doc = " The requested key was not found in the set."]
pub const AXEventErrorCode_AX_EVENT_ERROR_KEY_NOT_FOUND: AXEventErrorCode = 8;
#[doc = " Placeholder, do not use."]
pub const AXEventErrorCode_AX_EVENT_ERROR_END: AXEventErrorCode = 9;
#[doc = " \\enum AXEventErrorCode\n enumerates the different errors that cab be are\n reported by the axevent library."]
pub type AXEventErrorCode = ::std::os::raw::c_uint;
extern "C" {
    #[doc = " \\brief Generates a \\c GQuark for axevent errors.\n\n \\return a GQuark identifying an axevent error."]
    pub fn ax_event_error_quark() -> GQuark;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _AXEventKeyValueSet {
    _unused: [u8; 0],
}
#[doc = " \\brief The \\c AXEventKeyValueSet is an opaque data type required to create\n event declarations, event subscription and for receiving events."]
pub type AXEventKeyValueSet = _AXEventKeyValueSet;
extern "C" {
    #[doc = " \\brief Creates a new \\c AXEventKeyValueSet.\n\n \\return A newly allocated \\c AXEventKeyValueSet."]
    pub fn ax_event_key_value_set_new() -> *mut AXEventKeyValueSet;
}
extern "C" {
    #[doc = " \\brief Frees an \\c AXEventKeyValueSet.\n\n \\param key_value_set        An \\c AXEventKeyValueSet"]
    pub fn ax_event_key_value_set_free(key_value_set: *mut AXEventKeyValueSet);
}
extern "C" {
    #[doc = " \\brief Adds a set of key/value pairs to an \\c AXEventKeyValueSet. The number of\n arguments is arbitrary and must be on the form\n\n (const char *key, const char *name_space, gpointer, ValueSort)\n\n where name_space may be \\c NULL. The last argument to\n #ax_event_key_value_set_add_key_values must be \\c NULL.\n\n Keys that are already in the \\c AXEventKeyValueSet will be replaced.\n\n \\param key_value_set       The \\c AXEventKeyValueSet\n \\param error               The return location for an error.\n \\param ...                 List of arguments.\n \\return                    \\c TRUE if successful, otherwise \\c FALSE. If\n                            \\c FALSE\n                            and \\c error is not \\c NULL, then \\c error\n                            contains a detailed description of the error."]
    pub fn ax_event_key_value_set_add_key_values(
        key_value_set: *mut AXEventKeyValueSet,
        error: *mut *mut GError,
        ...
    ) -> gboolean;
}
extern "C" {
    #[doc = " \\brief Add a key/value pair to an \\c AXEventKeyValueSet. If the added key is\n already in the \\c AXEventKeyValueSet, then the value associated with the key will\n be replaced.\n\n \\param key_value_set       The \\c AXEventKeyValueSet\n \\param key                 The key.\n \\param name_space          The namespace of the key or \\c NULL.\n \\param value               The value associated with the key.\n \\param value_type          The type of the value held by #value.\n \\param error               Return location for an error.\n \\return                    \\c TRUE if successful, otherwise \\c FALSE. If\n                            \\c FALSE and \\c error is not \\c NULL, then\n                            \\c error contains a detailed description of the\n                            error."]
    pub fn ax_event_key_value_set_add_key_value(
        key_value_set: *mut AXEventKeyValueSet,
        key: *const gchar,
        name_space: *const gchar,
        value: gconstpointer,
        value_type: AXEventValueType,
        error: *mut *mut GError,
    ) -> gboolean;
}
extern "C" {
    #[doc = " \\brief Mark a key in the \\c AXEventKeyValueSet as a source. A source key\n is an identifier used to distinguish between multiple instances of\n the same event declaration. E.g. if a device has multiple I/O ports then\n event declarations that represent the state of each port will have the\n same keys but different values. The key that represents which port the\n event represents should be marked as source and the key which represents\n the state should be marked as data. Please note that although it is possible\n to mark more than one key as a source, only events with zero or one source\n keys can be used to trigger actions.\n\n \\param key_value_set       The \\c AXEventKeyValueSet\n \\param key                 The key.\n \\param name_space          The namespace of the key or \\c NULL.\n \\param error               Return location for an error.\n \\return                    \\c TRUE if successful, otherwise \\c FALSE. If\n                            \\c FALSE and \\c error is not \\c NULL, then\n                            \\c error contains a detailed description of the\n                            error."]
    pub fn ax_event_key_value_set_mark_as_source(
        key_value_set: *mut AXEventKeyValueSet,
        key: *const gchar,
        name_space: *const gchar,
        error: *mut *mut GError,
    ) -> gboolean;
}
extern "C" {
    #[doc = " \\brief Mark a key in the \\c AXEventKeyValueSet as data. A data key is a key that\n represents the state of what the event represents. E.g. an event declaration\n that represents an I/O port should have a key marked as data which represents\n the state, high or low, of the port. Please note that although it is possible\n to mark more than one key as data, only events with one and only one data key\n can be used to trigger actions.\n\n \\param key_value_set       The \\c AXEventKeyValueSet\n \\param key                 The key.\n \\param name_space          The namespace of the key or \\c NULL.\n \\param error               Return location for an error.\n \\return                    \\c TRUE if successful, otherwise \\c FALSE. If\n                            \\c FALSE and \\c error is not \\c NULL, then\n                            \\c error contains a detailed description of the\n                            error."]
    pub fn ax_event_key_value_set_mark_as_data(
        key_value_set: *mut AXEventKeyValueSet,
        key: *const gchar,
        name_space: *const gchar,
        error: *mut *mut GError,
    ) -> gboolean;
}
extern "C" {
    #[doc = " \\brief Mark a key in \\c AXEventKeyValueSet with an user defined tag.\n\n \\param key_value_set       The \\c AXEventKeyValueSet\n \\param key                 The key.\n \\param name_space          The namespace of the key or \\c NULL.\n \\param user_tag            The user defined tag.\n \\param error               Return location for an error.\n \\return                    \\c TRUE if successful, otherwise \\c FALSE. If\n                            \\c FALSE and \\c error is not \\c NULL, then\n                            \\c error contains a detailed description of the\n                            error."]
    pub fn ax_event_key_value_set_mark_as_user_defined(
        key_value_set: *mut AXEventKeyValueSet,
        key: *const gchar,
        name_space: *const gchar,
        user_tag: *const gchar,
        error: *mut *mut GError,
    ) -> gboolean;
}
extern "C" {
    #[doc = " \\brief Set the nice names of a key/value pair in the \\c AXEventKeyValueSet.\n Nice names can be used to display human-readable information about the\n key/value pair.\n\n \\param key_value_set       The \\c AXEventKeyValueSet\n \\param key                 The key.\n \\param name_space          The namespace of the key or \\c NULL.\n \\param key_nicename        The nice name of the key or \\c NULL.\n \\param value_nice_name     The nice name of the value or \\c NULL.\n \\param error               Return location for an error.\n \\return                    \\c TRUE if successful, otherwise \\c FALSE. If\n                            \\c FALSE and \\c error is not \\c NULL, then\n                            \\c error contains a detailed description of the\n                            error."]
    pub fn ax_event_key_value_set_add_nice_names(
        key_value_set: *mut AXEventKeyValueSet,
        key: *const gchar,
        name_space: *const gchar,
        key_nice_name: *const gchar,
        value_nice_name: *const gchar,
        error: *mut *mut GError,
    ) -> gboolean;
}
extern "C" {
    #[doc = " \\brief Retrieve the value type of the value associated with a key.\n\n \\param key_value_set       The \\c AXEventKeyValueSet\n \\param key                 The key.\n \\param name_space          The namespace of the key or \\c NULL.\n \\param value_type          Return location for the value type.\n \\param error               Return location for an error.\n \\return                    \\c TRUE if successful, otherwise \\c FALSE. If\n                            \\c FALSE and \\c error is not \\c NULL, then\n                            \\c error contains a detailed description of the\n                            error."]
    pub fn ax_event_key_value_set_get_value_type(
        key_value_set: *const AXEventKeyValueSet,
        key: *const gchar,
        name_space: *const gchar,
        value_type: *mut AXEventValueType,
        error: *mut *mut GError,
    ) -> gboolean;
}
extern "C" {
    #[doc = " \\brief Retrieve the integer value associated with a key.\n\n \\param key_value_set       The \\c AXEventKeyValueSet\n \\param key                 The key.\n \\param name_space          The namespace of the key or \\c NULL if the key is\n                            in the global namespace.\n \\param value               Return location for the integer value.\n \\param error               Return location for an error or \\c NULL\n \\return                    \\c TRUE if the key was found, otherwise \\c FALSE.\n                            If \\c FALSE and \\c error is not \\c NULL, then\n                            \\c error contains a detailed description of the\n                            error."]
    pub fn ax_event_key_value_set_get_integer(
        key_value_set: *const AXEventKeyValueSet,
        key: *const gchar,
        name_space: *const gchar,
        value: *mut gint,
        error: *mut *mut GError,
    ) -> gboolean;
}
extern "C" {
    #[doc = " \\brief Retrieve the boolean value associated with a key.\n\n \\param key_value_set       The \\c AXEventKeyValueSet.\n \\param key                 The key.\n \\param name_space          The namespace of the key or \\c NULL if the key is\n                            in the global namespace.\n \\param value               Return location for the boolean value.\n \\param error               Return location for an error or \\c NULL.\n \\return                    \\c TRUE if the key was found, otherwise \\c FALSE.\n                            If \\c FALSE and \\c error is not \\c NULL, then\n                            \\c error contains a detailed description of the\n                            error."]
    pub fn ax_event_key_value_set_get_boolean(
        key_value_set: *const AXEventKeyValueSet,
        key: *const gchar,
        name_space: *const gchar,
        value: *mut gboolean,
        error: *mut *mut GError,
    ) -> gboolean;
}
extern "C" {
    #[doc = " \\brief Retrieve the double value associated with a key.\n\n \\param key_value_set       The \\c AXEventKeyValueSet.\n \\param key                 The key.\n \\param name_space          The namespace of the key or \\c NULL if the key is\n                            in the global namespace.\n \\param value               Return location for the double value.\n \\param error               Return location for an error or \\c NULL\n \\return                    \\c TRUE if the key was found, otherwise \\c FALSE.\n                            If \\c FALSE and \\c error is not \\c NULL, then\n                            \\c error contains a detailed description of the\n                            error."]
    pub fn ax_event_key_value_set_get_double(
        key_value_set: *const AXEventKeyValueSet,
        key: *const gchar,
        name_space: *const gchar,
        value: *mut gdouble,
        error: *mut *mut GError,
    ) -> gboolean;
}
extern "C" {
    #[doc = " \\brief Retrieve the string value associated with a key.\n\n \\param key_value_set       The \\c AXEventKeyValueSet.\n \\param key                 The key.\n \\param name_space          The namespace of the key or \\c NULL if the key is\n                            in the global namespace.\n \\param value               Return location for the string value. If the value\n                            is found, value will point to a newly allocated\n                            string. The caller must free the string when it's no\n                            longer needed.\n \\param error               Return location for an error or \\c NULL\n \\return                    \\c TRUE if the key was found, otherwise \\c FALSE.\n                            If \\c FALSE and \\c error is not \\c NULL, then\n                            \\c error contains a detailed description of the\n                            error."]
    pub fn ax_event_key_value_set_get_string(
        key_value_set: *const AXEventKeyValueSet,
        key: *const gchar,
        name_space: *const gchar,
        value: *mut *mut gchar,
        error: *mut *mut GError,
    ) -> gboolean;
}
extern "C" {
    #[doc = " \\brief Retrieve the element item associated with a key.\n\n \\param key_value_set       The \\c AXEventKeyValueSet.\n \\param key                 The key.\n \\param name_space          The namespace of the key or \\c NULL if the key is\n                            in the global namespace.\n \\param item                Return location for the AXEventElementItem. If the\n                            value is found, value will point to a newly\n                            allocated item. The caller must free the item when\n                            it's no longer needed.\n \\param error               Return location for an error or \\c NULL\n \\return                    \\c TRUE if the key was found, otherwise \\c FALSE.\n                            If \\c FALSE and \\c error is not \\c NULL, then\n                            \\c error contains a detailed description of the\n                            error."]
    pub fn ax_event_key_value_set_get_element(
        key_value_set: *const AXEventKeyValueSet,
        key: *const gchar,
        name_space: *const gchar,
        item: *mut *mut AXEventElementItem,
        error: *mut *mut GError,
    ) -> gboolean;
}
extern "C" {
    #[doc = " \\brief Removes a key and its associated value from an  \\c AXEventKeyValueSet.\n\n \\param key_value_set       The \\c AXEventKeyValueSet\n \\param key                 The key to remove.\n \\param name_space          The namespace of the key or \\c NULL.\n \\param error               Return location for an error.\n \\return                    \\c TRUE if successful, otherwise \\c FALSE. If\n                            \\c FALSE and \\c error is not \\c NULL, then\n                            \\c error contains a detailed description of the\n                            error."]
    pub fn ax_event_key_value_set_remove_key(
        key_value_set: *mut AXEventKeyValueSet,
        key: *const gchar,
        name_space: *const gchar,
        error: *mut *mut GError,
    ) -> gboolean;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _AXEvent {
    _unused: [u8; 0],
}
#[doc = " \\brief The \\c AXEvent is an opaque data type required to send and receive\n events."]
pub type AXEvent = _AXEvent;
extern "C" {
    #[doc = " \\brief Creates a new #AXEvent.\n \\deprecated This function has been deprecated.\n             Use ax_event_new2 instead.\n\n \\param key_value_set       An \\c AXEventKeyValueSet.\n \\param time_stamp          The time when the event occurred or \\c NULL. If\n                            \\c NULL\n                            the current time will be set implicitly.\n \\return                    A new \\c AXEvent."]
    pub fn ax_event_new(
        key_value_set: *mut AXEventKeyValueSet,
        time_stamp: *mut GTimeVal,
    ) -> *mut AXEvent;
}
extern "C" {
    #[doc = " \\brief Creates a new #AXEvent.\n\n \\param key_value_set       An \\c AXEventKeyValueSet.\n \\param datetime            The time when the event occurred or \\c NULL. If\n                            \\c 0\n                            the current time will be set implicitly.\n \\return                    A new \\c AXEvent."]
    pub fn ax_event_new2(
        key_value_set: *mut AXEventKeyValueSet,
        time_stamp: *mut GDateTime,
    ) -> *mut AXEvent;
}
extern "C" {
    #[doc = "\\brief Free an \\c AXEvent.\n\n\\param event               An \\c AXEvent."]
    pub fn ax_event_free(event: *mut AXEvent);
}
extern "C" {
    #[doc = " \\brief Get the \\c AXEventKeyValueSet associated with the \\c AXEvent.\n\n \\param event               An \\c AXEvent.\n \\return                    The \\c AXEventKeyValueSet associated with the\n                            \\c AXEvent."]
    pub fn ax_event_get_key_value_set(event: *mut AXEvent) -> *const AXEventKeyValueSet;
}
extern "C" {
    #[doc = " \\brief Get the time stamp associated with the \\c AXEvent.\n \\deprecated This function has been deprecated.\n             Use ax_event_get_time_stamp2 instead.\n\n \\param event               An \\c AXEvent.\n \\return                    The time stamp associated with the \\c AXEvent."]
    pub fn ax_event_get_time_stamp(event: *mut AXEvent) -> *const GTimeVal;
}
extern "C" {
    #[doc = " \\brief Get the time stamp associated with the \\c AXEvent.\n\n \\param event               An \\c AXEvent.\n \\return                    The time stamp associated with the \\c AXEvent."]
    pub fn ax_event_get_time_stamp2(event: *mut AXEvent) -> *mut GDateTime;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _AXEventHandler {
    _unused: [u8; 0],
}
#[doc = " \\brief The \\c AXEventHandler is an opaque data type used as an entry point\n into the event system."]
pub type AXEventHandler = _AXEventHandler;
#[doc = " \\brief This is the prototype of the callback function called whenever an\n event matching a subscription is received.\n\n \\param subscription        The subscription handle associated with the\n                            subscription.\n \\param event               The received event. It's the responsibility of\n                            of the callback receiver to free the event.\n \\param user_data           The user_data pointer supplied to\n                            \\c ax_event_handler_subscribe when the\n                            subscription was set up."]
pub type AXSubscriptionCallback = ::std::option::Option<
    unsafe extern "C" fn(subscription: guint, event: *mut AXEvent, user_data: gpointer),
>;
#[doc = " \\brief This is the prototype of the callback function called when a\n declaration has registered with the event system.\n\n \\param declaration         The handle associated with a declaration.\n \\param user_data           The user_data pointer supplied to\n                            \\c ax_event_handler_declare or\n                            \\c ax_event_handler_declare_from_template when the\n                            declaration was set up."]
pub type AXDeclarationCompleteCallback =
    ::std::option::Option<unsafe extern "C" fn(declaration: guint, user_data: gpointer)>;
extern "C" {
    #[doc = " \\brief Creates a new \\c AXEventHandler.\n\n \\return                    a newly allocated \\c AXEventHandler."]
    pub fn ax_event_handler_new() -> *mut AXEventHandler;
}
extern "C" {
    #[doc = " \\brief Destroys an \\c AXEventHandler an deallocates all associated\n declarations and subscriptions. Any pending callbacks associated with the\n \\c AXEventHandler will be cancelled.\n\n \\param event_handler       An \\c AXEventHandler."]
    pub fn ax_event_handler_free(event_handler: *mut AXEventHandler);
}
extern "C" {
    #[doc = "  \\brief Declares a new event.\n\n \\param event_handler       An \\c AXEventHandler.\n \\param key_value_set       An \\c AXEventKeyValueSet describing the event.\n \\param stateless           \\c TRUE if the event is a stateless event,\n                            otherwise \\c FALSE.\n \\param declaration         The return location for a unique handle\n                            associated with the resulting declaration.\n \\param callback            A callback function that will be called when\n                            the declaration has been registered with the\n                            event system or \\c NULL.\n \\param user_data           A pointer that will be supplied with the call to\n                            the \\c callback function.\n \\param error               The return location for an error or \\c NULL.\n \\return                    \\c TRUE if the declaration was successful\n                            otherwise \\c FALSE. If \\c FALSE and \\c error is\n                            not \\c NULL, then \\c error contains a detailed\n                            description of the error."]
    pub fn ax_event_handler_declare(
        event_handler: *mut AXEventHandler,
        key_value_set: *mut AXEventKeyValueSet,
        stateless: gboolean,
        declaration: *mut guint,
        callback: AXDeclarationCompleteCallback,
        user_data: gpointer,
        error: *mut *mut GError,
    ) -> gboolean;
}
extern "C" {
    #[doc = "  \\brief Declares a new event.\n\n \\param event_handler       An \\c AXEventHandler.\n \\param key_value_set       An \\c AXEventKeyValueSet describing the event.\n \\param stateless           \\c TRUE if the event is a stateless event,\n                            otherwise \\c FALSE.\n \\param property_name       The name of the key that should be a stateful property.\nThis is only used for stateful events.\n \\param declaration         The return location for a unique handle\n                            associated with the resulting declaration.\n \\param callback            A callback function that will be called when\n                            the declaration has been registered with the\n                            event system or \\c NULL.\n \\param user_data           A pointer that will be supplied with the call to\n                            the \\c callback function.\n \\param error               The return location for an error or \\c NULL.\n \\return                    \\c TRUE if the declaration was successful\n                            otherwise \\c FALSE. If \\c FALSE and \\c error is\n                            not \\c NULL, then \\c error contains a detailed\n                            description of the error."]
    pub fn ax_event_handler_declare2(
        event_handler: *mut AXEventHandler,
        key_value_set: *mut AXEventKeyValueSet,
        stateless: gboolean,
        property_name: *mut gchar,
        declaration: *mut guint,
        callback: AXDeclarationCompleteCallback,
        user_data: gpointer,
        error: *mut *mut GError,
    ) -> gboolean;
}
extern "C" {
    #[doc = " \\brief Declares a new event based upon an event template.\n\n \\param event_handler       An \\c AXEventHandler.\n \\param event_template      The name of the event template.\n \\param key_value_set       An \\c AXEventKeyValueSet that describes the\n                            wild-card values in the event template.\n \\param declaration         The return location for a unique handle\n                            associated with the declaration.\n \\param callback            A callback function that will be called when\n                            the declaration has been registered with the\n                            event system.\n \\param user_data           A pointer that will be supplied with the call to\n                            the \\c callback function.\n \\param error               The return location for an error or \\c NULL.\n \\return                    \\c TRUE if the declaration was successful\n                            otherwise \\c FALSE. If \\c FALSE and \\c error is\n                            not \\c NULL, then \\c error contains a detailed\n                            description of the error."]
    pub fn ax_event_handler_declare_from_template(
        event_handler: *mut AXEventHandler,
        event_template: *const ::std::os::raw::c_char,
        key_value_set: *mut AXEventKeyValueSet,
        declaration: *mut guint,
        callback: AXDeclarationCompleteCallback,
        user_data: gpointer,
        error: *mut *mut GError,
    ) -> gboolean;
}
extern "C" {
    #[doc = " \\brief Undeclares an event. Any pending callbacks associated with the\n declaration will be cancelled.\n\n \\param event_handler       An \\c AXEventHandler.\n \\param declaration         A declaration handle previously obtained from\n                            \\c ax_event_handler_declare.\n \\param error               The return location for an error or \\c NULL.\n \\return                    \\c TRUE if the declaration was successfully\n                            undeclared otherwise \\c FALSE. If \\c FALSE and\n                            \\c error is not \\c NULL, then \\c error contains a\n                            detailed description of the error."]
    pub fn ax_event_handler_undeclare(
        event_handler: *mut AXEventHandler,
        declaration: guint,
        error: *mut *mut GError,
    ) -> gboolean;
}
extern "C" {
    #[doc = " \\brief Sends an event.\n\n \\param event_handler       An \\c AXEventHandler.\n \\param declaration         A declaration handle previously obtains from\n                            \\c ax_event_handler_declare.\n \\param event               An \\c AXEvent containing the updated values that\n                            represent the event.\n \\param error               The return location for an error or \\c NULL.\n \\return                    \\c TRUE if the event was successfully sent\n                            otherwise \\c FALSE. If \\c FALSE and \\c error is\n                            not \\c NULL, then \\c error contains a detailed\n                            description of the error."]
    pub fn ax_event_handler_send_event(
        event_handler: *mut AXEventHandler,
        declaration: guint,
        event: *mut AXEvent,
        error: *mut *mut GError,
    ) -> gboolean;
}
extern "C" {
    #[doc = " \\brief Subscribes to an event or a set of events.\n\n \\param event_handler       An \\c AXEventHandler.\n \\param key_value_set       An \\c AXEventKeyValueSet containing the keys and values\n                            matching the keys and values of the event(s) that\n                            is/are being subscribed to.\n \\param subscription        A return location for a unique handle associated\n                            with the subscription.\n \\param callback            A callback function which will be called as soon\n                            as an event macthing the subscription is\n                            received.\n \\param user_data           A pointer to data that should be supplied to the\n                            \\c callback function.\n \\param error               The return location for an error or \\c NULL.\n \\return                    \\c TRUE if the subscription was successful\n                            otherwise \\c FALSE. If \\c FALSE and \\c error is\n                            not \\c NULL, then \\c error contains a detailed\n                            description of the error."]
    pub fn ax_event_handler_subscribe(
        event_handler: *mut AXEventHandler,
        key_value_set: *mut AXEventKeyValueSet,
        subscription: *mut guint,
        callback: AXSubscriptionCallback,
        user_data: gpointer,
        error: *mut *mut GError,
    ) -> gboolean;
}
extern "C" {
    #[doc = " \\brief Unsubscribes from an event or a set of events.\n\n \\param event_handler       An \\c AXEventHandler\n \\param subscription        A subscription handle previously obtained from\n                            \\c ax_event_handler_subscribe.\n \\param error               The return location for an error or \\c NULL.\n \\return                    \\c TRUE if the unsubscribe was successful\n                            otherwise \\c FALSE. If \\c FALSE and \\c error is\n                            not \\c NULL, then \\c error contains a detailed\n                            description of the error."]
    pub fn ax_event_handler_unsubscribe(
        event_handler: *mut AXEventHandler,
        subscription: guint,
        error: *mut *mut GError,
    ) -> gboolean;
}
