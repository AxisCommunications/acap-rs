/* automatically generated by rust-bindgen 0.69.4 */

#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _AXStorage {
    _unused: [u8; 0],
}
pub type AXStorage = _AXStorage;
pub const AXStorageStatusEventId_AX_STORAGE_AVAILABLE_EVENT: AXStorageStatusEventId = 0;
pub const AXStorageStatusEventId_AX_STORAGE_EXITING_EVENT: AXStorageStatusEventId = 1;
pub const AXStorageStatusEventId_AX_STORAGE_WRITABLE_EVENT: AXStorageStatusEventId = 2;
pub const AXStorageStatusEventId_AX_STORAGE_FULL_EVENT: AXStorageStatusEventId = 3;
pub const AXStorageStatusEventId_AX_STORAGE_STATUS_EVENT_ID_END: AXStorageStatusEventId = 4;
pub type AXStorageStatusEventId = ::std::os::raw::c_uint;
pub const AXStorageType_LOCAL_TYPE: AXStorageType = 0;
pub const AXStorageType_EXTERNAL_TYPE: AXStorageType = 1;
pub const AXStorageType_UNKNOWN_TYPE: AXStorageType = 2;
pub type AXStorageType = ::std::os::raw::c_uint;
extern "C" {
    pub fn ax_storage_list(error: *mut *mut GError) -> *mut GList;
}
pub type AXStorageSubscriptionCallback = ::std::option::Option<
    unsafe extern "C" fn(storage_id: *mut gchar, user_data: gpointer, error: *mut GError),
>;
extern "C" {
    pub fn ax_storage_subscribe(
        storage_id: *mut gchar,
        callback: AXStorageSubscriptionCallback,
        user_data: gpointer,
        error: *mut *mut GError,
    ) -> guint;
}
extern "C" {
    pub fn ax_storage_unsubscribe(id: guint, error: *mut *mut GError) -> gboolean;
}
pub type AXStorageSetupCallback = ::std::option::Option<
    unsafe extern "C" fn(storage: *mut AXStorage, user_data: gpointer, error: *mut GError),
>;
extern "C" {
    pub fn ax_storage_setup_async(
        storage_id: *mut gchar,
        callback: AXStorageSetupCallback,
        user_data: gpointer,
        error: *mut *mut GError,
    ) -> gboolean;
}
pub type AXStorageReleaseCallback =
    ::std::option::Option<unsafe extern "C" fn(user_data: gpointer, error: *mut GError)>;
extern "C" {
    pub fn ax_storage_release_async(
        storage: *mut AXStorage,
        callback: AXStorageReleaseCallback,
        user_data: gpointer,
        error: *mut *mut GError,
    ) -> gboolean;
}
extern "C" {
    pub fn ax_storage_get_path(storage: *mut AXStorage, error: *mut *mut GError) -> *mut gchar;
}
extern "C" {
    pub fn ax_storage_get_status(
        storage_id: *mut gchar,
        event: AXStorageStatusEventId,
        error: *mut *mut GError,
    ) -> gboolean;
}
extern "C" {
    pub fn ax_storage_get_storage_id(
        storage: *mut AXStorage,
        error: *mut *mut GError,
    ) -> *mut gchar;
}
extern "C" {
    pub fn ax_storage_get_type(storage: *mut AXStorage, error: *mut *mut GError) -> AXStorageType;
}
pub const AXStorageErrorCode_AX_STORAGE_ERROR_GENERIC: AXStorageErrorCode = 0;
pub const AXStorageErrorCode_AX_STORAGE_ERROR_INVALID_ARGUMENT: AXStorageErrorCode = 1;
pub const AXStorageErrorCode_AX_STORAGE_ERROR_INCOMPATIBLE_VALUE: AXStorageErrorCode = 2;
pub const AXStorageErrorCode_AX_STORAGE_ERROR_SUBSCRIPTION: AXStorageErrorCode = 3;
pub const AXStorageErrorCode_AX_STORAGE_ERROR_UNSUBSCRIBE: AXStorageErrorCode = 4;
pub const AXStorageErrorCode_AX_STORAGE_ERROR_SETUP: AXStorageErrorCode = 5;
pub const AXStorageErrorCode_AX_STORAGE_ERROR_END: AXStorageErrorCode = 6;
pub type AXStorageErrorCode = ::std::os::raw::c_uint;
extern "C" {
    pub fn ax_storage_error_quark() -> GQuark;
}
