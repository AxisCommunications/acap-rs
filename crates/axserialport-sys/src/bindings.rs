/* automatically generated by rust-bindgen 0.69.5 */

#[repr(i32)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum AXSerialErrorCode {
    Ok = 0,
    GenericError = -1,
    ReadTimeout = -5,
    ConfigurationError = -10,
    SetEnableError = -11,
    SetPortmodeError = -12,
    SetBaudrateError = -13,
    SetDatabitsError = -14,
    SetStopbitsError = -15,
    SetParityError = -16,
    SetBiasError = -17,
    SetTerminationError = -18,
    TransportError = -20,
    CallbackError = -30,
    NotInitialized = -100,
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum AXSerialPortmode {
    Rs232 = 0,
    Rs422 = 1,
    Rs485 = 2,
    Rs485Four = 3,
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum AXSerialBaudrate {
    B300 = 300,
    B600 = 600,
    B1200 = 1200,
    B2400 = 2400,
    B4800 = 4800,
    B9600 = 9600,
    B19200 = 19200,
    B38400 = 38400,
    B57600 = 57600,
    B115200 = 115200,
    B230400 = 230400,
    B460800 = 460800,
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum AXSerialParity {
    None = 0,
    Even = 1,
    Odd = 2,
    Mark = 3,
    Space = 4,
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum AXSerialDatabits {
    Seven = 7,
    Eight = 8,
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum AXSerialStopbits {
    One = 1,
    Two = 2,
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum AXSerialEnable {
    Disable = 0,
    Enable = 1,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _AXSerialConfig {
    _unused: [u8; 0],
}
pub type AXSerialConfig = _AXSerialConfig;
extern "C" {
    pub fn ax_serial_init(portindex: guint, error: *mut *mut GError) -> *mut AXSerialConfig;
}
extern "C" {
    pub fn ax_serial_cleanup(config: *mut AXSerialConfig);
}
extern "C" {
    pub fn ax_serial_port_enable(
        config: *mut AXSerialConfig,
        enable: AXSerialEnable,
        error: *mut *mut GError,
    ) -> gboolean;
}
extern "C" {
    pub fn ax_serial_get_fd(config: *mut AXSerialConfig, error: *mut *mut GError) -> gint;
}
extern "C" {
    pub fn ax_serial_set_portmode(
        config: *mut AXSerialConfig,
        mode: AXSerialPortmode,
        error: *mut *mut GError,
    ) -> gboolean;
}
extern "C" {
    pub fn ax_serial_set_baudrate(
        config: *mut AXSerialConfig,
        baudrate: AXSerialBaudrate,
        error: *mut *mut GError,
    ) -> gboolean;
}
extern "C" {
    pub fn ax_serial_set_databits(
        config: *mut AXSerialConfig,
        databits: AXSerialDatabits,
        error: *mut *mut GError,
    ) -> gboolean;
}
extern "C" {
    pub fn ax_serial_set_stopbits(
        config: *mut AXSerialConfig,
        stopbits: AXSerialStopbits,
        error: *mut *mut GError,
    ) -> gboolean;
}
extern "C" {
    pub fn ax_serial_set_parity(
        config: *mut AXSerialConfig,
        parity: AXSerialParity,
        error: *mut *mut GError,
    ) -> gboolean;
}
extern "C" {
    pub fn ax_serial_set_bias(
        config: *mut AXSerialConfig,
        bias: AXSerialEnable,
        error: *mut *mut GError,
    ) -> gboolean;
}
extern "C" {
    pub fn ax_serial_set_termination(
        config: *mut AXSerialConfig,
        termination: AXSerialEnable,
        error: *mut *mut GError,
    ) -> gboolean;
}
extern "C" {
    pub fn ax_serial_sync_port_settings(
        config: *mut AXSerialConfig,
        error: *mut *mut GError,
    ) -> gboolean;
}
