/* automatically generated by rust-bindgen 0.69.4 */

extern "C" {
    pub fn ax_parameter_error_quark() -> GQuark;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _AXParameter {
    _unused: [u8; 0],
}
pub type AXParameter = _AXParameter;
pub type AXParameterCallback = ::std::option::Option<
    unsafe extern "C" fn(name: *const gchar, value: *const gchar, data: gpointer),
>;
extern "C" {
    pub fn ax_parameter_new(app_name: *const gchar, error: *mut *mut GError) -> *mut AXParameter;
}
extern "C" {
    pub fn ax_parameter_free(parameter: *mut AXParameter);
}
extern "C" {
    pub fn ax_parameter_add(
        parameter: *mut AXParameter,
        name: *const gchar,
        initial_value: *const gchar,
        type_: *const gchar,
        error: *mut *mut GError,
    ) -> gboolean;
}
extern "C" {
    pub fn ax_parameter_remove(
        parameter: *mut AXParameter,
        name: *const gchar,
        error: *mut *mut GError,
    ) -> gboolean;
}
extern "C" {
    pub fn ax_parameter_set(
        parameter: *mut AXParameter,
        name: *const gchar,
        value: *const gchar,
        do_sync: gboolean,
        error: *mut *mut GError,
    ) -> gboolean;
}
extern "C" {
    pub fn ax_parameter_get(
        parameter: *mut AXParameter,
        name: *const gchar,
        value: *mut *mut gchar,
        error: *mut *mut GError,
    ) -> gboolean;
}
extern "C" {
    pub fn ax_parameter_list(parameter: *mut AXParameter, error: *mut *mut GError) -> *mut GList;
}
extern "C" {
    pub fn ax_parameter_register_callback(
        parameter: *mut AXParameter,
        name: *const gchar,
        callback: AXParameterCallback,
        userdata: gpointer,
        error: *mut *mut GError,
    ) -> gboolean;
}
extern "C" {
    pub fn ax_parameter_unregister_callback(parameter: *mut AXParameter, name: *const gchar);
}
